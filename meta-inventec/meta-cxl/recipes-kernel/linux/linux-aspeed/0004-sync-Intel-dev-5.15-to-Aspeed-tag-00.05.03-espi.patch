From 20d4123e43355aa1fcb25250e40db0e988a001b3 Mon Sep 17 00:00:00 2001
From: link <link@inventec.com>
Date: Fri, 23 Dec 2022 01:10:22 +0000
Subject: [PATCH] Kernel-sync - [Intel only][Intel-BMC] branch dev-5.15-intel
 aspeed-espi-slave

Symptom/Reason:
    Sync codebase with Intel-BMC/linux 7c1de25c06f31b04744beae891baf147af9ba0cb

Root Cause:
    N/A

Solution/Change:
    soc driver
        - aspeed-espi-slave, which is special for Intel PCH
          we modify the Intel's code based on aspeed, otherwise some define and function is not same and these have conflict
        - new header, aspeed-espi-ioc

Entry Test:
    N/A
---
 arch/arm/boot/dts/aspeed-g6.dtsi       |  17 +-
 drivers/soc/aspeed/Kconfig             |   8 +
 drivers/soc/aspeed/Makefile            |   1 +
 drivers/soc/aspeed/aspeed-espi-ctrl.h  |  40 +++
 drivers/soc/aspeed/aspeed-espi-slave.c | 466 +++++++++++++++++++++++++
 drivers/soc/aspeed/aspeed-espi-vw.c    |   3 +-
 include/uapi/linux/aspeed-espi-ioc.h   | 198 +++++++++++
 7 files changed, 731 insertions(+), 2 deletions(-)
 create mode 100644 drivers/soc/aspeed/aspeed-espi-slave.c
 create mode 100644 include/uapi/linux/aspeed-espi-ioc.h

diff --git a/arch/arm/boot/dts/aspeed-g6.dtsi b/arch/arm/boot/dts/aspeed-g6.dtsi
index 7d9242f05c13..ffb75c406df8 100644
--- a/arch/arm/boot/dts/aspeed-g6.dtsi
+++ b/arch/arm/boot/dts/aspeed-g6.dtsi
@@ -4,6 +4,7 @@
 #include <dt-bindings/interrupt-controller/arm-gic.h>
 #include <dt-bindings/interrupt-controller/aspeed-scu-ic.h>
 #include <dt-bindings/clock/ast2600-clock.h>
+#include <dt-bindings/gpio/aspeed-gpio.h>
 
 / {
 	model = "Aspeed BMC";
@@ -699,6 +700,8 @@
 				status = "disabled";
 			};
 
+			/* For Intel platform ESPI slave */
+			#if 0
 			espi: espi@1e6ee000 {
 				compatible = "aspeed,ast2600-espi", "simple-mfd", "syscon";
 				reg = <0x1e6ee000 0x1000>;
@@ -716,14 +719,26 @@
 					aspeed,espi-mmbi = <&espi_mmbi>;
 					status = "disabled";
 				};
-
 				espi_mmbi: espi-mmbi@800 {
 					compatible = "aspeed,ast2600-espi-mmbi";
 					reg = <0x800 0x50>;
 					interrupts = <GIC_SPI 108 IRQ_TYPE_LEVEL_HIGH>;
 					status = "disabled";
 				};
+			#else
+			espi: espi@1e6ee000 {
+				compatible = "aspeed,ast2600-espi-slave";
+				reg = <0x1e6ee000 0x200>;
+				interrupts-extended = <&gic GIC_SPI 42 IRQ_TYPE_LEVEL_HIGH>,
+					<&gpio0 ASPEED_GPIO(W, 7) IRQ_TYPE_EDGE_FALLING>;
+				status = "disabled";
+				clocks = <&syscon ASPEED_CLK_GATE_ESPICLK>;
+				resets = <&syscon ASPEED_RESET_ESPI>;
+				pinctrl-names = "default";
+				pinctrl-0 = <&pinctrl_espi_default>,
+					    <&pinctrl_espialt_default>;
 			};
+			#endif
 
 			chassis: chassis@1e6ef010 {
 				compatible = "aspeed,ast2600-chassis";
diff --git a/drivers/soc/aspeed/Kconfig b/drivers/soc/aspeed/Kconfig
index 1d3632c3f55b..892bb81dccd8 100644
--- a/drivers/soc/aspeed/Kconfig
+++ b/drivers/soc/aspeed/Kconfig
@@ -16,6 +16,14 @@ config ASPEED_VIDEO
 	help
 	  Driver for AST Video Engine
 
+config ASPEED_ESPI_SLAVE
+	depends on ARCH_ASPEED || COMPILE_TEST
+	depends on REGMAP_MMIO
+	tristate "Aspeed ast2500 eSPI slave device driver"
+	help
+	  Control Aspeed ast2500 eSPI slave controller to handle event
+	  which needs the firmware's processing.
+
 config ASPEED_LPC_CTRL
 	tristate "ASPEED LPC firmware cycle control"
 	select REGMAP
diff --git a/drivers/soc/aspeed/Makefile b/drivers/soc/aspeed/Makefile
index 9eaab1743e68..642761c08e55 100644
--- a/drivers/soc/aspeed/Makefile
+++ b/drivers/soc/aspeed/Makefile
@@ -1,6 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0-only
 obj-$(CONFIG_ASPEED_BMC_DEV)		+= aspeed-bmc-dev.o
 obj-$(CONFIG_ASPEED_HOST_BMC_DEV)	+= aspeed-host-bmc-dev.o
+obj-$(CONFIG_ASPEED_ESPI_SLAVE)		+= aspeed-espi-slave.o
 obj-$(CONFIG_ASPEED_LPC_CTRL)		+= aspeed-lpc-ctrl.o
 obj-$(CONFIG_ASPEED_LPC_SNOOP)		+= aspeed-lpc-snoop.o
 obj-$(CONFIG_ASPEED_UART_ROUTING)	+= aspeed-uart-routing.o
diff --git a/drivers/soc/aspeed/aspeed-espi-ctrl.h b/drivers/soc/aspeed/aspeed-espi-ctrl.h
index 247cb6ce46fb..a891f89bc4f3 100644
--- a/drivers/soc/aspeed/aspeed-espi-ctrl.h
+++ b/drivers/soc/aspeed/aspeed-espi-ctrl.h
@@ -34,6 +34,18 @@ struct aspeed_espi_ctrl {
 
 /* eSPI register offset */
 #define ESPI_CTRL		0x000
+/*
+ * Inventec
+ * combine aspeed + intel
+ */
+#define   ASPEED_ESPI_CTRL_SW_RESET		GENMASK(31, 24)
+#define   ASPEED_ESPI_HW_RESET			BIT(31)
+#define   ASPEED_ESPI_SYSEVT_INT_T0_MASK		0x00
+#define   ASPEED_ESPI_SYSEVT_INT_T1_MASK		0x00
+#define   ASPEED_ESPI_SYSEVT1_INT_T0_MASK		0x00
+#define   ASPEED_ESPI_SYSEVT1_INT_T1_MASK		0x00
+#define   ASPEED_ESPI_SYSEVT1_INT_T2_MASK		BIT(0)
+
 #define   ESPI_CTRL_OOB_RX_SW_RST		BIT(28)
 #define   ESPI_CTRL_FLASH_TX_DMA_EN		BIT(23)
 #define   ESPI_CTRL_FLASH_RX_DMA_EN		BIT(22)
@@ -273,6 +285,34 @@ struct aspeed_espi_ctrl {
 	 ESPI_INT_STS_FLASH_TX_CMPLT |	\
 	 ESPI_INT_STS_FLASH_RX_CMPLT)
 
+/* 
+ * Inventec
+ * combine aspeed + intel
+ * collect ASPEED_ESPI_INT_EN bits of eSPI channels for convenience */
+#define ASPEED_ESPI_INT_MASK		\
+	(ASPEED_ESPI_HW_RESET	|	\
+	ESPI_INT_STS_VW_SYSEVT1	|	\
+	ESPI_INT_STS_VW_SYSEVT)
+
+/*
+ * Inventec
+ * combine aspeed + intel
+ * Setup Interrupt Type / Enable of System Event from Master
+ *                                T2 T1 T0
+ *  1) HOST_RST_WARN : Dual Edge   1  0  0
+ *  2) OOB_RST_WARN  : Dual Edge   1  0  0
+ *  3) PLTRSTN       : Dual Edge   1  0  0
+ */
+#define ASPEED_ESPI_SYSEVT_INT_T2_MASK		\
+	(ESPI_SYSEVT_HOST_RST_WARN |	\
+	ESPI_SYSEVT_OOB_RST_WARN |	\
+	ESPI_SYSEVT_PLTRSTN)
+
+#define ASPEED_ESPI_SYSEVT1_INT_MASK		\
+	(ASPEED_ESPI_SYSEVT1_INT_T0_MASK |	\
+	ASPEED_ESPI_SYSEVT1_INT_T1_MASK |	\
+	ASPEED_ESPI_SYSEVT1_INT_T2_MASK)
+
 /* collect ESPI_INT_EN bits of eSPI channels for convenience */
 #define ESPI_INT_EN_PERIF_BITS			\
 	(ESPI_INT_EN_PERIF_NP_TX_ABT |		\
diff --git a/drivers/soc/aspeed/aspeed-espi-slave.c b/drivers/soc/aspeed/aspeed-espi-slave.c
new file mode 100644
index 000000000000..08ce31179520
--- /dev/null
+++ b/drivers/soc/aspeed/aspeed-espi-slave.c
@@ -0,0 +1,466 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (c) 2015-2019, Intel Corporation.
+
+#include <linux/aspeed-espi-ioc.h>
+#include <linux/clk.h>
+#include <linux/fs.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/miscdevice.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/poll.h>
+#include <linux/regmap.h>
+#include <linux/reset.h>
+#include <linux/sched/signal.h>
+#include <linux/spinlock.h>
+#include <linux/uaccess.h>
+
+#include "aspeed-espi-ctrl.h"
+#include "aspeed-espi-oob.h"
+#include "aspeed-espi-vw.h"
+
+struct aspeed_espi {
+	struct regmap		*map;
+	struct clk		*clk;
+	struct device		*dev;
+	struct reset_control	*reset;
+	int			irq;
+	int			rst_irq;
+
+	/* for PLTRST_N signal monitoring interface */
+	struct miscdevice	pltrstn_miscdev;
+	spinlock_t		pltrstn_lock; /* for PLTRST_N signal sampling */
+	wait_queue_head_t	pltrstn_waitq;
+	char			pltrstn;
+	bool			pltrstn_in_avail;
+	struct aspeed_espi_ctrl *espi_ctrl;
+
+};
+
+static void aspeed_espi_sys_event(struct aspeed_espi *priv)
+{
+	u32 sts, evt;
+
+	regmap_read(priv->map, ESPI_SYSEVT_INT_STS, &sts);
+	regmap_read(priv->map, ESPI_SYSEVT, &evt);
+
+	dev_dbg(priv->dev, "sys: sts = %08x, evt = %08x\n", sts, evt);
+
+	if (!(evt & ESPI_SYSEVT_SLV_BOOT_STS)) {
+		regmap_write(priv->map, ESPI_SYSEVT,
+			     evt | ESPI_SYSEVT_SLV_BOOT_STS |
+			     ESPI_SYSEVT_SLV_BOOT_DONE);
+		dev_dbg(priv->dev, "Setting espi slave boot done\n");
+	}
+	if (sts & ESPI_SYSEVT_HOST_RST_WARN) {
+		if (evt & ESPI_SYSEVT_HOST_RST_WARN)
+			regmap_write_bits(priv->map, ESPI_SYSEVT,
+					  ESPI_SYSEVT_HOST_RST_ACK,
+					  ESPI_SYSEVT_HOST_RST_ACK);
+		else
+			regmap_write_bits(priv->map, ESPI_SYSEVT,
+					  ESPI_SYSEVT_HOST_RST_ACK, 0);
+		dev_dbg(priv->dev, "SYSEVT_HOST_RST_WARN: acked\n");
+	}
+	if (sts & ESPI_SYSEVT_OOB_RST_WARN) {
+		if (evt & ESPI_SYSEVT_OOB_RST_WARN)
+			regmap_write_bits(priv->map, ESPI_SYSEVT,
+					  ESPI_SYSEVT_OOB_RST_ACK,
+					  ESPI_SYSEVT_OOB_RST_ACK);
+		else
+			regmap_write_bits(priv->map, ESPI_SYSEVT,
+					  ESPI_SYSEVT_OOB_RST_ACK, 0);
+		dev_dbg(priv->dev, "SYSEVT_OOB_RST_WARN: acked\n");
+	}
+	if (sts & ESPI_SYSEVT_PLTRSTN || priv->pltrstn == 'U') {
+		spin_lock(&priv->pltrstn_lock);
+		priv->pltrstn = (evt & ESPI_SYSEVT_PLTRSTN) ? '1' : '0';
+		priv->pltrstn_in_avail = true;
+		spin_unlock(&priv->pltrstn_lock);
+		wake_up_interruptible(&priv->pltrstn_waitq);
+		dev_dbg(priv->dev, "SYSEVT_PLTRSTN: %c\n", priv->pltrstn);
+	}
+
+	regmap_write(priv->map, ESPI_SYSEVT_INT_STS, sts);
+}
+
+static void aspeed_espi_sys_event1(struct aspeed_espi *priv)
+{
+	u32 sts, evt;
+
+	regmap_read(priv->map, ESPI_SYSEVT1_INT_STS, &sts);
+	regmap_read(priv->map, ESPI_SYSEVT1, &evt);
+
+	dev_dbg(priv->dev, "sys event1: sts = %08x, evt = %08x\n", sts, evt);
+
+	if (sts & ESPI_SYSEVT1_SUSPEND_WARN) {
+		if  (evt & ESPI_SYSEVT1_SUSPEND_WARN)
+			regmap_write_bits(priv->map, ESPI_SYSEVT1,
+					  ESPI_SYSEVT1_SUSPEND_ACK,
+					  ESPI_SYSEVT1_SUSPEND_ACK);
+		else
+			regmap_write_bits(priv->map, ESPI_SYSEVT1,
+					  ESPI_SYSEVT1_SUSPEND_ACK, 0);
+		dev_dbg(priv->dev, "SYSEVT1_SUS_WARN: acked\n");
+	}
+
+	regmap_write(priv->map, ESPI_SYSEVT1_INT_STS, sts);
+}
+
+static void aspeed_espi_boot_ack(struct aspeed_espi *priv)
+{
+	u32 evt;
+
+	regmap_read(priv->map, ESPI_SYSEVT, &evt);
+	if (!(evt & ESPI_SYSEVT_SLV_BOOT_STS)) {
+		regmap_write(priv->map, ESPI_SYSEVT,
+			     evt | ESPI_SYSEVT_SLV_BOOT_STS |
+			     ESPI_SYSEVT_SLV_BOOT_DONE);
+		dev_dbg(priv->dev, "Setting espi slave boot done\n");
+	}
+
+	regmap_read(priv->map, ESPI_SYSEVT1, &evt);
+	if (evt & ESPI_SYSEVT1_SUSPEND_WARN &&
+	    !(evt & ESPI_SYSEVT1_SUSPEND_ACK)) {
+		regmap_write(priv->map, ESPI_SYSEVT1,
+			     evt | ESPI_SYSEVT1_SUSPEND_ACK);
+		dev_dbg(priv->dev, "Boot SYSEVT1_SUS_WARN: acked\n");
+	}
+}
+
+static irqreturn_t aspeed_espi_irq(int irq, void *arg)
+{
+	struct aspeed_espi *priv = arg;
+	u32 sts, sts_handled = 0;
+
+	regmap_read(priv->map, ESPI_INT_STS, &sts);
+
+	dev_dbg(priv->dev, "INT_STS: 0x%08x\n", sts);
+
+	if (sts & ESPI_INT_STS_VW_SYSEVT) {
+		aspeed_espi_sys_event(priv);
+		sts_handled |= ESPI_INT_STS_VW_SYSEVT;
+	}
+	if (sts & ESPI_INT_STS_VW_SYSEVT1) {
+		aspeed_espi_sys_event1(priv);
+		sts_handled |= ESPI_INT_STS_VW_SYSEVT1;
+	}
+	if (sts & ESPI_INT_STS_OOB_BITS) {
+		aspeed_espi_oob_event(sts, priv->espi_ctrl->oob);
+		regmap_write(priv->map, ESPI_INT_STS, sts & ESPI_INT_STS_OOB_BITS);
+	}
+	if (sts & ASPEED_ESPI_HW_RESET) {
+		if (priv->rst_irq < 0) {
+			regmap_write_bits(priv->map, ESPI_CTRL,
+					  ASPEED_ESPI_CTRL_SW_RESET, 0);
+			regmap_write_bits(priv->map, ESPI_CTRL,
+					  ASPEED_ESPI_CTRL_SW_RESET,
+					  ASPEED_ESPI_CTRL_SW_RESET);
+		}
+
+		regmap_write_bits(priv->map, ESPI_CTRL,
+				  ESPI_CTRL_OOB_SW_RDY,
+				  ESPI_CTRL_OOB_SW_RDY);
+		aspeed_espi_boot_ack(priv);
+		sts_handled |= ASPEED_ESPI_HW_RESET;
+		aspeed_espi_oob_enable(priv->espi_ctrl->oob);
+		aspeed_espi_vw_enable(priv->espi_ctrl->vw);
+	}
+
+	regmap_write(priv->map, ESPI_INT_STS, sts);
+
+	return sts != sts_handled ? IRQ_NONE : IRQ_HANDLED;
+}
+
+static void aspeed_espi_config_irq(struct aspeed_espi *priv)
+{
+	regmap_write(priv->map, ESPI_SYSEVT_INT_T0, ASPEED_ESPI_SYSEVT_INT_T0_MASK);
+	regmap_write(priv->map, ESPI_SYSEVT_INT_T1, ASPEED_ESPI_SYSEVT_INT_T1_MASK);
+	regmap_write(priv->map, ESPI_SYSEVT_INT_T2, ASPEED_ESPI_SYSEVT_INT_T2_MASK);
+	regmap_write(priv->map, ESPI_SYSEVT_INT_EN, 0xFFFFFFFF);
+	regmap_write(priv->map, ESPI_SYSEVT1_INT_T0, ASPEED_ESPI_SYSEVT1_INT_T0_MASK);
+	regmap_write(priv->map, ESPI_SYSEVT1_INT_T1, ASPEED_ESPI_SYSEVT1_INT_T1_MASK);
+	regmap_write(priv->map, ESPI_SYSEVT1_INT_T2, ASPEED_ESPI_SYSEVT1_INT_T2_MASK);
+	regmap_write(priv->map, ESPI_SYSEVT1_INT_EN, ASPEED_ESPI_SYSEVT1_INT_MASK);
+	regmap_write_bits(priv->map, ESPI_INT_EN, ASPEED_ESPI_INT_MASK,
+			  ASPEED_ESPI_INT_MASK);
+}
+
+static irqreturn_t aspeed_espi_reset_isr(int irq, void *arg)
+{
+	struct aspeed_espi *priv = arg;
+
+	reset_control_assert(priv->reset);
+	reset_control_deassert(priv->reset);
+
+	regmap_write_bits(priv->map, ESPI_CTRL,
+			  ASPEED_ESPI_CTRL_SW_RESET, 0);
+	regmap_write_bits(priv->map, ESPI_CTRL,
+			  ASPEED_ESPI_CTRL_SW_RESET, ASPEED_ESPI_CTRL_SW_RESET);
+
+	regmap_write_bits(priv->map, ESPI_CTRL,
+			  ESPI_CTRL_OOB_SW_RDY, 0);
+
+	aspeed_espi_config_irq(priv);
+
+	return IRQ_HANDLED;
+}
+
+static inline struct aspeed_espi *to_aspeed_espi(struct file *filp)
+{
+	return container_of(filp->private_data, struct aspeed_espi,
+			    pltrstn_miscdev);
+}
+
+static int aspeed_espi_pltrstn_open(struct inode *inode, struct file *filp)
+{
+	struct aspeed_espi *priv = to_aspeed_espi(filp);
+
+	if ((filp->f_flags & O_ACCMODE) != O_RDONLY)
+		return -EACCES;
+	priv->pltrstn_in_avail = true ; /*Setting true returns first data after file open*/
+
+	return 0;
+}
+
+static ssize_t aspeed_espi_pltrstn_read(struct file *filp, char __user *buf,
+					size_t count, loff_t *offset)
+{
+	struct aspeed_espi *priv = to_aspeed_espi(filp);
+	DECLARE_WAITQUEUE(wait, current);
+	char data, old_sample;
+	int ret = 0;
+
+	spin_lock_irq(&priv->pltrstn_lock);
+
+	if (filp->f_flags & O_NONBLOCK) {
+		if (!priv->pltrstn_in_avail) {
+			ret = -EAGAIN;
+			goto out_unlock;
+		}
+		data = priv->pltrstn;
+		priv->pltrstn_in_avail = false;
+	} else {
+		add_wait_queue(&priv->pltrstn_waitq, &wait);
+		set_current_state(TASK_INTERRUPTIBLE);
+
+		old_sample = priv->pltrstn;
+
+		do {
+			if (old_sample != priv->pltrstn) {
+				data = priv->pltrstn;
+				priv->pltrstn_in_avail = false;
+				break;
+			}
+
+			if (signal_pending(current)) {
+				ret = -ERESTARTSYS;
+			} else {
+				spin_unlock_irq(&priv->pltrstn_lock);
+				schedule();
+				spin_lock_irq(&priv->pltrstn_lock);
+			}
+		} while (!ret);
+
+		remove_wait_queue(&priv->pltrstn_waitq, &wait);
+		set_current_state(TASK_RUNNING);
+	}
+out_unlock:
+	spin_unlock_irq(&priv->pltrstn_lock);
+
+	if (ret)
+		return ret;
+
+	ret = put_user(data, buf);
+	if (!ret)
+		ret = sizeof(data);
+
+	return ret;
+}
+
+static unsigned int aspeed_espi_pltrstn_poll(struct file *file,
+						 poll_table *wait)
+{
+	struct aspeed_espi *priv = to_aspeed_espi(file);
+	unsigned int mask = 0;
+
+	poll_wait(file, &priv->pltrstn_waitq, wait);
+	if (priv->pltrstn_in_avail)
+		mask |= POLLIN;
+	return mask;
+}
+
+static const struct file_operations aspeed_espi_pltrstn_fops = {
+	.owner	= THIS_MODULE,
+	.open	= aspeed_espi_pltrstn_open,
+	.read	= aspeed_espi_pltrstn_read,
+	.poll	= aspeed_espi_pltrstn_poll,
+};
+
+static const struct regmap_config aspeed_espi_regmap_cfg = {
+	.reg_bits	= 32,
+	.reg_stride	= 4,
+	.val_bits	= 32,
+	.max_register	= 0x200,
+};
+
+static int aspeed_espi_probe(struct platform_device *pdev)
+{
+	struct aspeed_espi_ctrl *espi_ctrl;
+	struct aspeed_espi *priv;
+	struct resource *res;
+	void __iomem *regs;
+	u32 ctrl;
+	int ret;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	regs = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(regs))
+		return PTR_ERR(regs);
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	espi_ctrl = devm_kzalloc(&pdev->dev, sizeof(*espi_ctrl), GFP_KERNEL);
+	if (!espi_ctrl)
+		return -ENOMEM;
+
+	dev_set_drvdata(&pdev->dev, priv);
+	priv->dev = &pdev->dev;
+	priv->espi_ctrl = espi_ctrl;
+	espi_ctrl->model = of_device_get_match_data(&pdev->dev);
+	priv->map = devm_regmap_init_mmio(&pdev->dev, regs,
+					  &aspeed_espi_regmap_cfg);
+	if (IS_ERR(priv->map))
+		return PTR_ERR(priv->map);
+	espi_ctrl->map = priv->map;
+	aspeed_espi_config_irq(priv);
+	espi_ctrl->oob = aspeed_espi_oob_alloc(&pdev->dev, espi_ctrl);
+	if (IS_ERR(espi_ctrl->oob)) {
+		dev_err(&pdev->dev, "Failed to allocate espi out-of-band channel\n");
+		return PTR_ERR(espi_ctrl->oob);
+	}
+	espi_ctrl->vw = aspeed_espi_vw_alloc(&pdev->dev, espi_ctrl);
+	if (IS_ERR(espi_ctrl->vw)) {
+		dev_err(&pdev->dev, "Failed to allocate espi virtual wire channel\n");
+		return PTR_ERR(espi_ctrl->vw);
+	}
+
+	spin_lock_init(&priv->pltrstn_lock);
+	init_waitqueue_head(&priv->pltrstn_waitq);
+	priv->pltrstn = 'U'; /* means it's not reported yet from master */
+
+	priv->irq = platform_get_irq(pdev, 0);
+	if (priv->irq < 0)
+		return priv->irq;
+
+	ret = devm_request_irq(&pdev->dev, priv->irq, aspeed_espi_irq, 0,
+			       "aspeed-espi-irq", priv);
+	if (ret)
+		return ret;
+
+	if (of_device_is_compatible(pdev->dev.of_node,
+				    "aspeed,ast2600-espi-slave")) {
+		priv->rst_irq = platform_get_irq(pdev, 1);
+		if (priv->rst_irq < 0)
+			return priv->rst_irq;
+
+		ret = devm_request_irq(&pdev->dev, priv->rst_irq,
+				       aspeed_espi_reset_isr, 0,
+				       "aspeed-espi-rst-irq", priv);
+		if (ret)
+			return ret;
+
+		priv->reset = devm_reset_control_get(&pdev->dev, NULL);
+		if (IS_ERR(priv->reset))
+			return PTR_ERR(priv->reset);
+	} else {
+		priv->rst_irq = -ENOTSUPP;
+	}
+
+	priv->clk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(priv->clk))
+		return dev_err_probe(&pdev->dev, PTR_ERR(priv->clk),
+				     "couldn't get clock\n");
+	ret = clk_prepare_enable(priv->clk);
+	if (ret) {
+		dev_err(&pdev->dev, "couldn't enable clock\n");
+		return ret;
+	}
+
+	/*
+	 * We check that the regmap works on this very first access, but as this
+	 * is an MMIO-backed regmap, subsequent regmap access is not going to
+	 * fail and we skip error checks from this point.
+	 */
+	ret = regmap_read(priv->map, ESPI_CTRL, &ctrl);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to read ctrl register\n");
+		goto err_clk_disable_out;
+	}
+	regmap_write(priv->map, ESPI_CTRL,
+		     ctrl | ESPI_CTRL_OOB_SW_RDY);
+
+	priv->pltrstn_miscdev.minor = MISC_DYNAMIC_MINOR;
+	priv->pltrstn_miscdev.name = "espi-pltrstn";
+	priv->pltrstn_miscdev.fops = &aspeed_espi_pltrstn_fops;
+	priv->pltrstn_miscdev.parent = &pdev->dev;
+
+	ret = misc_register(&priv->pltrstn_miscdev);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable to register device\n");
+		goto err_clk_disable_out;
+	}
+
+	aspeed_espi_boot_ack(priv);
+
+	dev_info(&pdev->dev, "eSPI registered, irq %d\n", priv->irq);
+
+	return 0;
+
+err_clk_disable_out:
+	clk_disable_unprepare(priv->clk);
+	return ret;
+}
+
+static int aspeed_espi_remove(struct platform_device *pdev)
+{
+	struct aspeed_espi *priv = dev_get_drvdata(&pdev->dev);
+
+	aspeed_espi_oob_free(priv->dev, priv->espi_ctrl->oob);
+	aspeed_espi_vw_free(priv->dev, priv->espi_ctrl->vw);
+	misc_deregister(&priv->pltrstn_miscdev);
+	clk_disable_unprepare(priv->clk);
+	return 0;
+}
+
+static const struct aspeed_espi_model ast2600_model = {
+	.version = ESPI_AST2600,
+};
+
+static const struct of_device_id of_espi_match_table[] = {
+	{ .compatible = "aspeed,ast2500-espi-slave" },
+	{ .compatible = "aspeed,ast2600-espi-slave",
+	  .data	      = &ast2600_model},
+	{ }
+};
+MODULE_DEVICE_TABLE(of, of_espi_match_table);
+
+static struct platform_driver aspeed_espi_driver = {
+	.driver	= {
+		.name		= KBUILD_MODNAME,
+		.of_match_table	= of_match_ptr(of_espi_match_table),
+	},
+	.probe	= aspeed_espi_probe,
+	.remove	= aspeed_espi_remove,
+};
+module_platform_driver(aspeed_espi_driver);
+
+MODULE_AUTHOR("Haiyue Wang <haiyue.wang@linux.intel.com>");
+MODULE_AUTHOR("Jae Hyun Yoo <jae.hyun.yoo@linux.intel.com>");
+MODULE_DESCRIPTION("Aspeed eSPI driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/soc/aspeed/aspeed-espi-vw.c b/drivers/soc/aspeed/aspeed-espi-vw.c
index 819b3ae2f7ea..8af517d14e1a 100644
--- a/drivers/soc/aspeed/aspeed-espi-vw.c
+++ b/drivers/soc/aspeed/aspeed-espi-vw.c
@@ -2,6 +2,8 @@
 /*
  * Copyright 2021 ASPEED Technology Inc.
  */
+
+#include <linux/aspeed-espi-ioc.h>
 #include <linux/fs.h>
 #include <linux/of_device.h>
 #include <linux/miscdevice.h>
@@ -12,7 +14,6 @@
 #include <linux/miscdevice.h>
 #include <linux/dma-mapping.h>
 
-#include "aspeed-espi-ioc.h"
 #include "aspeed-espi-ctrl.h"
 #include "aspeed-espi-vw.h"
 
diff --git a/include/uapi/linux/aspeed-espi-ioc.h b/include/uapi/linux/aspeed-espi-ioc.h
new file mode 100644
index 000000000000..8e198158f6da
--- /dev/null
+++ b/include/uapi/linux/aspeed-espi-ioc.h
@@ -0,0 +1,198 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2021 Aspeed Technology Inc.
+ */
+#ifndef _ASPEED_ESPI_IOC_H
+#define _ASPEED_ESPI_IOC_H
+
+#include <linux/ioctl.h>
+#include <linux/types.h>
+
+/*
+ * eSPI cycle type encoding
+ *
+ * Section 5.1 Cycle Types and Packet Format,
+ * Intel eSPI Interface Base Specification, Rev 1.0, Jan. 2016.
+ */
+#define ESPI_PERIF_MEMRD32		0x00
+#define ESPI_PERIF_MEMRD64		0x02
+#define ESPI_PERIF_MEMWR32		0x01
+#define ESPI_PERIF_MEMWR64		0x03
+#define ESPI_PERIF_MSG			0x10
+#define ESPI_PERIF_MSG_D		0x11
+#define ESPI_PERIF_SUC_CMPLT		0x06
+#define ESPI_PERIF_SUC_CMPLT_D_MIDDLE	0x09
+#define ESPI_PERIF_SUC_CMPLT_D_FIRST	0x0b
+#define ESPI_PERIF_SUC_CMPLT_D_LAST	0x0d
+#define ESPI_PERIF_SUC_CMPLT_D_ONLY	0x0f
+#define ESPI_PERIF_UNSUC_CMPLT		0x0c
+#define ESPI_OOB_MSG			0x21
+#define ESPI_FLASH_READ			0x00
+#define ESPI_FLASH_WRITE		0x01
+#define ESPI_FLASH_ERASE		0x02
+#define ESPI_FLASH_SUC_CMPLT		0x06
+#define ESPI_FLASH_SUC_CMPLT_D_MIDDLE	0x09
+#define ESPI_FLASH_SUC_CMPLT_D_FIRST	0x0b
+#define ESPI_FLASH_SUC_CMPLT_D_LAST	0x0d
+#define ESPI_FLASH_SUC_CMPLT_D_ONLY	0x0f
+#define ESPI_FLASH_UNSUC_CMPLT		0x0c
+
+/*
+ * eSPI packet format structure
+ *
+ * Section 5.1 Cycle Types and Packet Format,
+ * Intel eSPI Interface Base Specification, Rev 1.0, Jan. 2016.
+ */
+struct espi_comm_hdr {
+	u8 cyc;
+	u8 len_h : 4;
+	u8 tag : 4;
+	u8 len_l;
+} __packed;
+
+struct espi_perif_mem32 {
+	u8 cyc;
+	u8 len_h : 4;
+	u8 tag : 4;
+	u8 len_l;
+	u32 addr_be;
+	u8 data[];
+} __packed;
+
+struct espi_perif_mem64 {
+	u8 cyc;
+	u8 len_h : 4;
+	u8 tag : 4;
+	u8 len_l;
+	u32 addr_be;
+	u8 data[];
+} __packed;
+
+struct espi_perif_msg {
+	u8 cyc;
+	u8 len_h : 4;
+	u8 tag : 4;
+	u8 len_l;
+	u8 msg_code;
+	u8 msg_byte[4];
+	u8 data[];
+} __packed;
+
+struct espi_perif_cmplt {
+	u8 cyc;
+	u8 len_h : 4;
+	u8 tag : 4;
+	u8 len_l;
+	u8 data[];
+} __packed;
+
+struct espi_oob_msg {
+	u8 cyc;
+	u8 len_h : 4;
+	u8 tag : 4;
+	u8 len_l;
+	u8 data[];
+} __packed;
+
+struct espi_flash_rwe {
+	u8 cyc;
+	u8 len_h : 4;
+	u8 tag : 4;
+	u8 len_l;
+	u32 addr_be;
+	u8 data[];
+} __packed;
+
+struct espi_flash_cmplt {
+	u8 cyc;
+	u8 len_h : 4;
+	u8 tag : 4;
+	u8 len_l;
+	u8 data[];
+} __packed;
+
+struct aspeed_espi_ioc {
+	u32 pkt_len;
+	u8 *pkt;
+};
+
+#define ESPI_LEN_HIGH(len)	(((len) >> 0x08) & 0x0F)
+#define ESPI_LEN_LOW(len)	((len) & 0xFF)
+#define ESPI_LEN(len_h, len_l)	((((len_h) << 0x08) & 0x0F00) | ((len_l) & 0xFF))
+
+/*
+ * We choose the longest header and the max payload size based on the Intel
+ * specification to define the maximum eSPI packet length.
+ */
+#define ASPEED_ESPI_PLD_LEN_MIN	BIT(6)
+#define ASPEED_ESPI_PLD_LEN_MAX	BIT(12)
+#define ASPEED_ESPI_PKT_LEN_MAX	(sizeof(struct espi_perif_msg) + ASPEED_ESPI_PLD_LEN_MAX)
+
+#define __ASPEED_ESPI_IOCTL_MAGIC	0xb8
+
+/*
+ * The IOCTL-based interface works in the eSPI packet in/out paradigm.
+ *
+ * Only the virtual wire IOCTL is a special case which does not send
+ * or receive an eSPI packet. However, to keep a more consisten use from
+ * userspace, we make all of the four channel drivers serve through the
+ * IOCTL interface.
+ *
+ * For the eSPI packet format, refer to
+ *   Section 5.1 Cycle Types and Packet Format,
+ *   Intel eSPI Interface Base Specification, Rev 1.0, Jan. 2016.
+ *
+ * For the example user apps using these IOCTL, refer to
+ *   https://github.com/AspeedTech-BMC/aspeed_app/tree/master/espi_test
+ */
+
+/*
+ * Peripheral Channel (CH0)
+ *  - ASPEED_ESPI_PERIF_PC_GET_RX
+ *      Receive an eSPI Posted/Completion packet
+ *  - ASPEED_ESPI_PERIF_PC_PUT_TX
+ *      Transmit an eSPI Posted/Completion packet
+ *  - ASPEED_ESPI_PERIF_NP_PUT_TX
+ *      Transmit an eSPI Non-Posted packet
+ */
+#define ASPEED_ESPI_PERIF_PC_GET_RX	_IOR(__ASPEED_ESPI_IOCTL_MAGIC, \
+					     0x00, struct aspeed_espi_ioc)
+#define ASPEED_ESPI_PERIF_PC_PUT_TX	_IOW(__ASPEED_ESPI_IOCTL_MAGIC, \
+					     0x01, struct aspeed_espi_ioc)
+#define ASPEED_ESPI_PERIF_NP_PUT_TX	_IOW(__ASPEED_ESPI_IOCTL_MAGIC, \
+					     0x02, struct aspeed_espi_ioc)
+/*
+ * Virtual Wire Channel (CH1)
+ *  - ASPEED_ESPI_VW_GET_GPIO_VAL
+ *      Read the input value of GPIO over the VW channel
+ *  - ASPEED_ESPI_VW_PUT_GPIO_VAL
+ *      Write the output value of GPIO over the VW channel
+ */
+#define ASPEED_ESPI_VW_GET_GPIO_VAL	_IOR(__ASPEED_ESPI_IOCTL_MAGIC, \
+					     0x10, u8)
+#define ASPEED_ESPI_VW_PUT_GPIO_VAL	_IOW(__ASPEED_ESPI_IOCTL_MAGIC, \
+					     0x11, u8)
+/*
+ * Out-of-band Channel (CH2)
+ *  - ASPEED_ESPI_OOB_GET_RX
+ *      Receive an eSPI OOB packet
+ *  - ASPEED_ESPI_OOB_PUT_TX
+ *      Transmit an eSPI OOB packet
+ */
+#define ASPEED_ESPI_OOB_GET_RX		_IOR(__ASPEED_ESPI_IOCTL_MAGIC, \
+					     0x20, struct aspeed_espi_ioc)
+#define ASPEED_ESPI_OOB_PUT_TX		_IOW(__ASPEED_ESPI_IOCTL_MAGIC, \
+					     0x21, struct aspeed_espi_ioc)
+/*
+ * Flash Channel (CH3)
+ *  - ASPEED_ESPI_FLASH_GET_RX
+ *      Receive an eSPI flash packet
+ *  - ASPEED_ESPI_FLASH_PUT_TX
+ *      Transmit an eSPI flash packet
+ */
+#define ASPEED_ESPI_FLASH_GET_RX	_IOR(__ASPEED_ESPI_IOCTL_MAGIC, \
+					     0x30, struct aspeed_espi_ioc)
+#define ASPEED_ESPI_FLASH_PUT_TX	_IOW(__ASPEED_ESPI_IOCTL_MAGIC, \
+					     0x31, struct aspeed_espi_ioc)
+
+#endif
-- 
2.17.1

