From 25d1ddfc6c5b4916cfd5aa718a13f76c15561093 Mon Sep 17 00:00:00 2001
From: "Cheng.Mike" <Cheng.Mike@inventec.com>
Date: Fri, 17 May 2024 07:04:15 +0000
Subject: [PATCH 1/1] [Cxl Taurus][recipes-kernel] Cxl device tree source
 cm5162 LEO Soc support multi dimm idx via hwmon temp

System/Reason :

        1. cm5162 LEO Soc kernel driver update hwmon multi tempX_input sysfs support multi dimm idx

Root Cause :

        1. Base on Customer provided sdk driver source {code leo_api.c function leo_leoGetPrebootDdrConfig}:
        http://tao-pdmnet-4:8080/tfs/TAO_BU5_FW5/FW5E/_git/AWS_Taurus_Docs?path=/DataSheet/leo_csdk_v0_4_pi_1202_2022.tar

        2. Reference kernel spec :
        https://www.kernel.org/doc/Documentation/hwmon/hwmon-kernel-api.txt

        3. Linux kernel code {HWMON_T_INPUT}:

        old kernel version :
        https://jerry-cheng.blog.csdn.net/article/details/106449303?spm=1001.2014.3001.5502

        new kernel version :
        https://elixir.bootlin.com/linux/latest/source/include/linux/hwmon.h

        https://elixir.bootlin.com/linux/latest/source/drivers/hwmon/adt7470.c#L1193

Solution :

        1. Modify record under linux-aspeed :
              drivers/hwmon/cm5162.c

Entry Test :
        bitbake obmc-phosphor-image PASS
---
 drivers/hwmon/cm5162.c | 148 +++++++++++++++++++++++++++++++----------
 1 file changed, 112 insertions(+), 36 deletions(-)

diff --git a/drivers/hwmon/cm5162.c b/drivers/hwmon/cm5162.c
index 4d44a76a26ee..218290e77887 100644
--- a/drivers/hwmon/cm5162.c
+++ b/drivers/hwmon/cm5162.c
@@ -54,6 +54,14 @@
 
 
 
+// Generic cfg reg
+#define GENERIC_CFG_REG_0 (0x8008c)
+#define GENERIC_CFG_REG_3 (GENERIC_CFG_REG_0 + (4 * 3))
+#define GENERIC_CFG_REG_4 (GENERIC_CFG_REG_0 + (4 * 4))
+#define GENERIC_CFG_REG_40 (GENERIC_CFG_REG_0 + (4 * 40))
+
+
+
 /* Struct defining FW version loaded on an Aries device */
 struct cm5162_fw_ver {
 	u8 major; // FW version major release value
@@ -79,6 +87,13 @@ struct tsod_data {
   u32 ts1_dec;
 };
 
+struct ddr_config {
+  u32 numRanks;
+  u32 ddrSpeed;
+  u32 dqWidth;
+  u32 dpc;
+  u32 capacity;
+}; 
 
 /**
  * @brief Struct defining Leo CXL device
@@ -131,12 +146,12 @@ static int cm5162_write_block_data(struct cm5162_data *data, u32 address,
     return ret;
 }
 
-int cm5162_read_block_data_assemble(struct i2c_client *client, int cmdCode, uint8_t numBytes,
-                           uint8_t *buf) {
-  int32_t rc;                       
-  uint16_t i;                        
-  uint8_t buffer[8];
-  uint8_t reg;
+int cm5162_read_block_data_assemble(struct i2c_client *client, int cmdCode, u8 numBytes,
+                           u8 *buf) {
+  s32 rc;                       
+  u16 i;                        
+  u8 buffer[8];
+  u8 reg;
   //struct i2c_client *client;
   
   //client = (struct i2c_client*)handle;
@@ -199,10 +214,10 @@ static int cm5162_read_block_data(struct cm5162_data *data, u32 address,
     return ret;
 }
 
-static int cm5162_write_word_data(struct cm5162_data *data, uint32_t address,
-                              uint32_t val)
+static int cm5162_write_word_data(struct cm5162_data *data, u32 address,
+                              u32 val)
 {
-  uint8_t buf[4];
+  u8 buf[4];
   buf[0] = (val >> 24) & 0xff;
   buf[1] = (val >> 16) & 0xff;
   buf[2] = (val >> 8) & 0xff;
@@ -214,13 +229,13 @@ static int cm5162_write_word_data(struct cm5162_data *data, uint32_t address,
 static int cm5162_read_word_data(struct cm5162_data *data, u32 address,
 				   u32 *val)
 {
-    int ret = cm5162_read_block_data(data, address, 4, (uint8_t *)val);
+    int ret = cm5162_read_block_data(data, address, 4, (u8 *)val);
     return ret;
 }
 
-uint32_t check_door_bell(struct cm5162_data *data)
+u32 check_door_bell(struct cm5162_data *data)
 {
-  uint32_t val;
+  u32 val;
   cm5162_read_word_data(data, MAILBOX_CMD_REG_ADDRESS, &val);
   return ((val >> 16) & 1);
 }
@@ -228,7 +243,7 @@ uint32_t check_door_bell(struct cm5162_data *data)
 int wait_for_door_bell(struct cm5162_data *data)
 {
   size_t i;
-  uint32_t door_bell = 0;
+  u32 door_bell = 0;
   /* wait for door bell to be 0 */
   for (i = 0; i < 10000; i++) {
     door_bell = check_door_bell(data);
@@ -242,7 +257,7 @@ int wait_for_door_bell(struct cm5162_data *data)
   return 0;
 }
 
-static size_t send_mailbox_payload(struct cm5162_data *data, uint32_t *payload)
+static size_t send_mailbox_payload(struct cm5162_data *data, u32 *payload)
 {
   size_t idx = 0;
   size_t payload_len = 16;
@@ -255,27 +270,27 @@ static size_t send_mailbox_payload(struct cm5162_data *data, uint32_t *payload)
   return idx;
 }
 
-void send_mailbox_cmd(struct cm5162_data *data, uint32_t addr, uint32_t cmd,
+void send_mailbox_cmd(struct cm5162_data *data, u32 addr, u32 cmd,
                     size_t payload_len)
 {
   cm5162_write_word_data(data, MAILBOX_ADDR_REG_ADDRESS, addr);
-  uint32_t val =
+  u32 val =
       cmd | (payload_len << 24) | (1 << 16); // bit 16 is the doorbell
   cm5162_write_word_data(data, MAILBOX_CMD_REG_ADDRESS, val);
 }
 
-uint32_t get_mailbox_status(struct cm5162_data *data)
+u32 get_mailbox_status(struct cm5162_data *data)
 {
-  uint32_t val;
+  u32 val;
   cm5162_read_word_data(data, MAILBOX_STATUS_REG_ADDRESS, &val);
   return (val > 24) & 0xf;
 }
 
-static size_t get_return_data(struct cm5162_data *data, uint32_t *data_out,
+static size_t get_return_data(struct cm5162_data *data, u32 *data_out,
                      size_t exp_data_len)
 {
   size_t i;
-  uint32_t read_data;
+  u32 read_data;
 
   for (i = 0; i < exp_data_len; i++) {
     cm5162_read_word_data(data, (MAILBOX_DATA_REG_ADDRESS + (i << 2)),
@@ -286,13 +301,13 @@ static size_t get_return_data(struct cm5162_data *data, uint32_t *data_out,
   return exp_data_len;
 }
 
-static int exec_operation(struct cm5162_data *data, uint32_t addr,
-                                uint32_t cmd, uint32_t *data_in,
-                                uint32_t *data_out, size_t exp_ret_data_len)
+static int exec_operation(struct cm5162_data *data, u32 addr,
+                                u32 cmd, u32 *data_in,
+                                u32 *data_out, size_t exp_ret_data_len)
 {
   size_t data_len;
   size_t ret_len;
-  uint32_t buf[4];
+  u32 buf[4];
   int i;
 
   /* ASTERA_INFO("MM: in exec_operation: wait for doorbell\n"); */
@@ -327,10 +342,10 @@ static int exec_operation(struct cm5162_data *data, uint32_t addr,
 }
 
 static int cm5162_get_tsod_data(struct cm5162_data *data,
-                            struct tsod_data *tsod, uint8_t dimm_id)
+                            struct tsod_data *tsod, u8 dimm_id)
 {
-  uint32_t buf_in[16];
-  uint32_t buf_out[16];
+  u32 buf_in[16];
+  u32 buf_out[16];
   buf_out[0] = dimm_id;
   exec_operation(data, 0, FW_API_MMB_CMD_OPCODE_MMB_CHK_DIMM_TSOD,
                 buf_out, buf_in, 4);
@@ -375,7 +390,7 @@ static int cm5162_get_tsod_data(struct cm5162_data *data,
 
 static int cm5162_get_fw_version(struct cm5162_data *data)
 {
-  uint32_t read_word;
+  u32 read_word;
   cm5162_read_word_data(data, LEO_FW_VERSION_ADDR, &read_word);
   data->fw_ver.minor = read_word & 0xff;
   data->fw_ver.major = (read_word >> 8) & 0xff;
@@ -389,6 +404,41 @@ static int cm5162_init_dev(struct cm5162_data *data)
 	return cm5162_get_fw_version(data);
 }
 
+/**
+ * @brief Leo get Preboot DDR config
+ *
+ * Reads and decodes DDR config information from Leo registers
+ *
+ * @param[in]  LeoDeviceType
+ * @param[in]  LeoDdrConfigType
+ * @return     LeoErrorType
+ */
+static int cm5162_check_ddr_config(struct cm5162_data *data,
+                                  struct ddr_config *ddrConfig)
+{
+  u32 ddrtypeStr;
+  u32 rankmapStr;
+  u32 cxlmemStr;
+  u32 dpc;
+  // u32 rc;
+  int ret = 0;
+
+  ret = cm5162_read_word_data(data, GENERIC_CFG_REG_3, &ddrtypeStr);
+  ret = cm5162_read_word_data(data, GENERIC_CFG_REG_40, &cxlmemStr);
+  ret = cm5162_read_word_data(data, GENERIC_CFG_REG_4, &rankmapStr);
+
+  ddrConfig->numRanks = (ddrtypeStr >> 3) & 0x1f;
+  ddrConfig->ddrSpeed = (ddrtypeStr >> 8) & 0x3f;
+  ddrConfig->dqWidth = (ddrtypeStr >> 14) & 0x1f;
+  ddrConfig->capacity = (cxlmemStr)&0xff;
+  dpc = (rankmapStr >> 27) & 0x1f;
+  ddrConfig->dpc = 1;
+  if (dpc == 15 || dpc == 5 || dpc == 10) {
+    ddrConfig->dpc = 2;
+  }
+  return ret;
+}
+
 static int cm5162_read(struct device *dev, enum hwmon_sensor_types type,
 			u32 attr, int channel, long *val)
 {
@@ -407,8 +457,7 @@ static int cm5162_read(struct device *dev, enum hwmon_sensor_types type,
 
 	switch (attr) {
 	case hwmon_temp_input:
-		mutex_lock(&data->lock);
-		ret = cm5162_get_tsod_data(data,tsod,0);  // 0 means CM5162 value Check dimm id 0 area temperature value via i2c command
+		ret = cm5162_get_tsod_data(data, tsod, channel);
 		mutex_unlock(&data->lock);
 		break;
 	default:
@@ -443,8 +492,18 @@ static umode_t cm5162_is_visible(const void *data,
 	return 0;
 }
 
-static const struct hwmon_channel_info *cm5162_info[] = {
-	HWMON_CHANNEL_INFO(temp, HWMON_T_INPUT),
+static const struct hwmon_channel_info *cm5162_v2_info[] = {
+	HWMON_CHANNEL_INFO(temp, 
+  HWMON_T_INPUT,
+  HWMON_T_INPUT,
+  HWMON_T_INPUT),
+	NULL
+};
+
+static const struct hwmon_channel_info *cm5162_v1_info[] = {
+	HWMON_CHANNEL_INFO(temp, 
+  HWMON_T_INPUT,
+  HWMON_T_INPUT),
 	NULL
 };
 
@@ -453,9 +512,14 @@ static const struct hwmon_ops cm5162_hwmon_ops = {
 	.read = cm5162_read,
 };
 
-static const struct hwmon_chip_info cm5162_chip_info = {
+static const struct hwmon_chip_info cm5162_v1_chip_info = {
+	.ops = &cm5162_hwmon_ops,
+	.info = cm5162_v1_info,
+};
+
+static const struct hwmon_chip_info cm5162_v2_chip_info = {
 	.ops = &cm5162_hwmon_ops,
-	.info = cm5162_info,
+	.info = cm5162_v2_info,
 };
 
 static ssize_t cm5162_debugfs_read_fw_ver(struct file *file, char __user *buf,
@@ -505,6 +569,7 @@ static int cm5162_probe(struct i2c_client *client)
 	struct device *dev = &client->dev;
 	struct device *hwmon_dev;
 	struct cm5162_data *data;
+  struct ddr_config *ddr_cfg;
 
 	data = devm_kzalloc(dev, sizeof(struct cm5162_data), GFP_KERNEL);
 	if (!data)
@@ -513,9 +578,20 @@ static int cm5162_probe(struct i2c_client *client)
 	data->client = client;
 	mutex_init(&data->lock);
 	cm5162_init_dev(data);
+  cm5162_check_ddr_config(data, ddr_cfg);
 
-	hwmon_dev = devm_hwmon_device_register_with_info(
-		dev, client->name, data, &cm5162_chip_info, NULL);
+	switch (ddr_cfg->dpc) {
+	case 1:                   //leo support dimm dix == 2 means support 0 , 1 dimm idx
+      hwmon_dev = devm_hwmon_device_register_with_info(
+        dev, client->name, data, &cm5162_v1_chip_info, NULL);
+		break;
+	case 2:                   //leo support dimm dix == 2 means support 0 , 1 , 2 dimm idx
+      hwmon_dev = devm_hwmon_device_register_with_info(
+        dev, client->name, data, &cm5162_v2_chip_info, NULL);  
+		break;
+	default:
+		return -EOPNOTSUPP;
+	}
 
 	if (cm5162_init_debugfs(data))
 		dev_warn(dev, "Failed to register debugfs\n");
-- 
2.39.2

