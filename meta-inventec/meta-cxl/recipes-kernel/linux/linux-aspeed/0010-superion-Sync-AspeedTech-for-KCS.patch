From ae8db9599380b89d5fcfe487ea02fab1e47ef39e Mon Sep 17 00:00:00 2001
From: kian <Lee.Kian@inventec.com>
Date: Thu, 25 May 2023 13:13:04 +0800
Subject: [PATCH] [superion][Kernel] Sync AspeedTech-BMC tag 00.05.03 for kcs

Sympton/Reason:
	Sync AspeedTech-BMC tag 00.05.03
	https://github.com/AspeedTech-BMC/linux/blob/v00.05.03/drivers/char/ipmi/kcs_bmc_aspeed.c

Root Cause:
  N/A

Solution/Change:
  driver
  	linux-aspeed/drivers/char/ipmi/kcs_bmc_aspeed.c

  dts
	linux-aspeed/arch/arm/boot/dts/aspeed-bmc-inventec-superion.dts
---
 drivers/char/ipmi/kcs_bmc_aspeed.c | 72 ++++++++++++++++++------------
 1 file changed, 43 insertions(+), 29 deletions(-)

diff --git a/drivers/char/ipmi/kcs_bmc_aspeed.c b/drivers/char/ipmi/kcs_bmc_aspeed.c
index b555286016b1..bdfacdc5ba18 100644
--- a/drivers/char/ipmi/kcs_bmc_aspeed.c
+++ b/drivers/char/ipmi/kcs_bmc_aspeed.c
@@ -27,7 +27,7 @@
 
 #define DEVICE_NAME     "ast-kcs-bmc"
 
-#define KCS_CHANNEL_MAX     4
+#define KCS_CHANNEL_MAX     10
 
 /*
  * Field class descriptions
@@ -175,6 +175,7 @@ static void aspeed_kcs_outb(struct kcs_bmc_device *kcs_bmc, u32 reg, u8 data)
 
 	switch (kcs_bmc->channel) {
 	case 1:
+	case 6:
 		switch (priv->upstream_irq.id) {
 		case 12:
 			regmap_update_bits(priv->map, LPC_SIRQCR0, LPC_SIRQCR0_IRQ12E1,
@@ -189,12 +190,15 @@ static void aspeed_kcs_outb(struct kcs_bmc_device *kcs_bmc, u32 reg, u8 data)
 		}
 		break;
 	case 2:
+	case 7:
 		regmap_update_bits(priv->map, LPC_HICR5, LPC_HICR5_IRQXE2, LPC_HICR5_IRQXE2);
 		break;
 	case 3:
+	case 8:
 		regmap_update_bits(priv->map, LPC_HICR5, LPC_HICR5_IRQXE3, LPC_HICR5_IRQXE3);
 		break;
 	case 4:
+	case 9:
 		regmap_update_bits(priv->map, LPC_HICRC, LPC_HICRC_IRQXE4, LPC_HICRC_IRQXE4);
 		break;
 	default:
@@ -212,17 +216,14 @@ static void aspeed_kcs_updateb(struct kcs_bmc_device *kcs_bmc, u32 reg, u8 mask,
 }
 
 /*
- * AST_usrGuide_KCS.pdf
- * 2. Background:
- *   we note D for Data, and C for Cmd/Status, default rules are
- *     A. KCS1 / KCS2 ( D / C:X / X+4 )
- *        D / C : CA0h / CA4h
- *        D / C : CA8h / CACh
- *     B. KCS3 ( D / C:XX2h / XX3h )
- *        D / C : CA2h / CA3h
- *        D / C : CB2h / CB3h
- *     C. KCS4
- *        D / C : CA4h / CA5h
+ *  we note D for Data, and C for Cmd/Status, default rules are
+ *    A. KCS1/KCS2/KCS4 (D/C: X/X+1)
+ *       D / C : CA0h / CA1h
+ *       D / C : CA8h / CA9h
+ *       D / C : CA4h / CA5h
+ *    B. KCS3 (D/C: XX2h/XX3h )
+ *       D / C : CA2h / CA3h
+ *       D / C : CB2h / CB3h
  */
 static int aspeed_kcs_set_address(struct kcs_bmc_device *kcs_bmc, u32 addrs[2], int nr_addrs)
 {
@@ -233,6 +234,7 @@ static int aspeed_kcs_set_address(struct kcs_bmc_device *kcs_bmc, u32 addrs[2],
 
 	switch (priv->kcs_bmc.channel) {
 	case 1:
+	case 6:
 		regmap_update_bits(priv->map, LPC_HICR4, LPC_HICR4_LADR12AS, 0);
 		regmap_write(priv->map, LPC_LADR12H, addrs[0] >> 8);
 		regmap_write(priv->map, LPC_LADR12L, addrs[0] & 0xFF);
@@ -246,6 +248,7 @@ static int aspeed_kcs_set_address(struct kcs_bmc_device *kcs_bmc, u32 addrs[2],
 		break;
 
 	case 2:
+	case 7:
 		regmap_update_bits(priv->map, LPC_HICR4, LPC_HICR4_LADR12AS, LPC_HICR4_LADR12AS);
 		regmap_write(priv->map, LPC_LADR12H, addrs[0] >> 8);
 		regmap_write(priv->map, LPC_LADR12L, addrs[0] & 0xFF);
@@ -259,17 +262,14 @@ static int aspeed_kcs_set_address(struct kcs_bmc_device *kcs_bmc, u32 addrs[2],
 		break;
 
 	case 3:
-		if (nr_addrs == 2) {
-			dev_err(priv->kcs_bmc.dev,
-				"Channel 3 only supports inferred status IO address\n");
-			return -EINVAL;
-		}
-
+	case 8:
+		/* Channel 3 only supports inferred status IO address */
 		regmap_write(priv->map, LPC_LADR3H, addrs[0] >> 8);
 		regmap_write(priv->map, LPC_LADR3L, addrs[0] & 0xFF);
 		break;
 
 	case 4:
+	case 9:
 		if (nr_addrs == 1)
 			regmap_write(priv->map, LPC_LADR4, ((addrs[0] + 1) << 16) | addrs[0]);
 		else
@@ -316,9 +316,11 @@ static int aspeed_kcs_config_upstream_irq(struct aspeed_kcs_bmc *priv, u32 id, u
 
 	switch (priv->kcs_bmc.channel) {
 	case 1:
+	case 6:
 		/* Needs IRQxE1 rather than (ID1IRQX, SEL1IRQX, IRQXE1) before AST2600 A3 */
 		break;
 	case 2:
+	case 7:
 		if (!(hw_type == LPC_TYIRQX_LOW || hw_type == LPC_TYIRQX_HIGH))
 			return -EINVAL;
 
@@ -329,6 +331,7 @@ static int aspeed_kcs_config_upstream_irq(struct aspeed_kcs_bmc *priv, u32 id, u
 
 		break;
 	case 3:
+	case 8:
 		if (!(hw_type == LPC_TYIRQX_LOW || hw_type == LPC_TYIRQX_HIGH))
 			return -EINVAL;
 
@@ -339,6 +342,7 @@ static int aspeed_kcs_config_upstream_irq(struct aspeed_kcs_bmc *priv, u32 id, u
 
 		break;
 	case 4:
+	case 9:
 		mask = LPC_HICRC_ID4IRQX_MASK | LPC_HICRC_TY4IRQX_MASK | LPC_HICRC_OBF4_AUTO_CLR;
 		val = (id << LPC_HICRC_ID4IRQX_SHIFT) | (hw_type << LPC_HICRC_TY4IRQX_SHIFT);
 		regmap_update_bits(priv->map, LPC_HICRC, mask, val);
@@ -359,17 +363,21 @@ static void aspeed_kcs_enable_channel(struct kcs_bmc_device *kcs_bmc, bool enabl
 
 	switch (kcs_bmc->channel) {
 	case 1:
+	case 6:
 		regmap_update_bits(priv->map, LPC_HICR0, LPC_HICR0_LPC1E, enable * LPC_HICR0_LPC1E);
 		return;
 	case 2:
+	case 7:
 		regmap_update_bits(priv->map, LPC_HICR0, LPC_HICR0_LPC2E, enable * LPC_HICR0_LPC2E);
 		return;
 	case 3:
+	case 8:
 		regmap_update_bits(priv->map, LPC_HICR0, LPC_HICR0_LPC3E, enable * LPC_HICR0_LPC3E);
 		regmap_update_bits(priv->map, LPC_HICR4,
 				   LPC_HICR4_KCSENBL, enable * LPC_HICR4_KCSENBL);
 		return;
 	case 4:
+	case 9:
 		regmap_update_bits(priv->map, LPC_HICRB, LPC_HICRB_LPC4E, enable * LPC_HICRB_LPC4E);
 		return;
 	default:
@@ -418,18 +426,22 @@ static void aspeed_kcs_irq_mask_update(struct kcs_bmc_device *kcs_bmc, u8 mask,
 
 		switch (kcs_bmc->channel) {
 		case 1:
+		case 6:
 			regmap_update_bits(priv->map, LPC_HICR2, LPC_HICR2_IBFIE1,
 					   enable * LPC_HICR2_IBFIE1);
 			return;
 		case 2:
+		case 7:
 			regmap_update_bits(priv->map, LPC_HICR2, LPC_HICR2_IBFIE2,
 					   enable * LPC_HICR2_IBFIE2);
 			return;
 		case 3:
+		case 8:
 			regmap_update_bits(priv->map, LPC_HICR2, LPC_HICR2_IBFIE3,
 					   enable * LPC_HICR2_IBFIE3);
 			return;
 		case 4:
+		case 9:
 			regmap_update_bits(priv->map, LPC_HICRB, LPC_HICRB_IBFIE4,
 					   enable * LPC_HICRB_IBFIE4);
 			return;
@@ -473,6 +485,11 @@ static const struct kcs_ioreg ast_kcs_bmc_ioregs[KCS_CHANNEL_MAX] = {
 	{ .idr = LPC_IDR2, .odr = LPC_ODR2, .str = LPC_STR2 },
 	{ .idr = LPC_IDR3, .odr = LPC_ODR3, .str = LPC_STR3 },
 	{ .idr = LPC_IDR4, .odr = LPC_ODR4, .str = LPC_STR4 },
+	{ /* legacy, not used */ },
+	{ .idr = LPC_IDR1, .odr = LPC_ODR1, .str = LPC_STR1 },
+	{ .idr = LPC_IDR2, .odr = LPC_ODR2, .str = LPC_STR2 },
+	{ .idr = LPC_IDR3, .odr = LPC_ODR3, .str = LPC_STR3 },
+	{ .idr = LPC_IDR4, .odr = LPC_ODR4, .str = LPC_STR4 },
 };
 
 static int aspeed_kcs_of_v1_get_channel(struct platform_device *pdev)
@@ -503,7 +520,9 @@ aspeed_kcs_of_v1_get_io_address(struct platform_device *pdev, u32 addrs[2])
 		return -EINVAL;
 	}
 
-	return 1;
+	addrs[1] = addrs[0] + 1;
+
+	return 2;
 }
 
 static int aspeed_kcs_of_v2_get_channel(struct platform_device *pdev)
@@ -577,14 +596,6 @@ static int aspeed_kcs_probe(struct platform_device *pdev)
 	int nr_addrs;
 	u32 addrs[2];
 
-	np = pdev->dev.of_node->parent;
-	if (!of_device_is_compatible(np, "aspeed,ast2400-lpc-v2") &&
-	    !of_device_is_compatible(np, "aspeed,ast2500-lpc-v2") &&
-	    !of_device_is_compatible(np, "aspeed,ast2600-lpc-v2")) {
-		dev_err(&pdev->dev, "unsupported LPC device binding\n");
-		return -ENODEV;
-	}
-
 	ops = of_device_get_match_data(&pdev->dev);
 	if (!ops)
 		return -EINVAL;
@@ -624,6 +635,9 @@ static int aspeed_kcs_probe(struct platform_device *pdev)
 	priv->obe.remove = false;
 	timer_setup(&priv->obe.timer, aspeed_kcs_check_obe, 0);
 
+	/* mask IRQ for safety */
+	aspeed_kcs_irq_mask_update(kcs_bmc, (KCS_BMC_EVENT_TYPE_IBF | KCS_BMC_EVENT_TYPE_OBE), 0);
+
 	rc = aspeed_kcs_set_address(kcs_bmc, addrs, nr_addrs);
 	if (rc)
 		return rc;
@@ -644,7 +658,6 @@ static int aspeed_kcs_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, priv);
 
-	aspeed_kcs_irq_mask_update(kcs_bmc, (KCS_BMC_EVENT_TYPE_IBF | KCS_BMC_EVENT_TYPE_OBE), 0);
 	aspeed_kcs_enable_channel(kcs_bmc, true);
 
 	rc = kcs_bmc_add_device(&priv->kcs_bmc);
@@ -691,9 +704,10 @@ static const struct aspeed_kcs_of_ops of_v2_ops = {
 static const struct of_device_id ast_kcs_bmc_match[] = {
 	{ .compatible = "aspeed,ast2400-kcs-bmc", .data = &of_v1_ops },
 	{ .compatible = "aspeed,ast2500-kcs-bmc", .data = &of_v1_ops },
+	{ .compatible = "aspeed,ast2600-kcs-bmc", .data = &of_v1_ops },
 	{ .compatible = "aspeed,ast2400-kcs-bmc-v2", .data = &of_v2_ops },
 	{ .compatible = "aspeed,ast2500-kcs-bmc-v2", .data = &of_v2_ops },
-	{ .compatible = "aspeed,ast2600-kcs-bmc", .data = &of_v2_ops },
+	{ .compatible = "aspeed,ast2600-kcs-bmc-v2", .data = &of_v2_ops },
 	{ }
 };
 MODULE_DEVICE_TABLE(of, ast_kcs_bmc_match);
